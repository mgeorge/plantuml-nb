/* 
 * The MIT License
 *
 * Copyright 2014 Venkat Ram Akkineni.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.netbeans.modules.plantumlnb.ui.options;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.awt.HtmlBrowser;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbPreferences;

/**
 * 
 * @author markiewb
 */
public final class PlantUMLPanel extends javax.swing.JPanel {

    public static final String DOT_MANUAL_MODE_DOT_PATH = "dotManualModeDotPath";
    public static final String DOT_MANUAL_MODE = "dotManualMode";
    public static final String PLANTUML_ENCODING = "plantumlEncoding";
    public static final String DEFAULT_UTF8_ENCODING = "UTF-8";
    public static final String SERVER_MODE = "plantumlServerMode";
    public static final String SERVER_URI = "plantumlServerURI";
    public static final String DEFAULT_SERVER_URI = "https://www.plantuml.com/plantuml";

    private final PlantUMLOptionsPanelController controller;

    PlantUMLPanel(final PlantUMLOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        txtDotPath.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                controller.changed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                controller.changed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                controller.changed();
            }
        });
        cbDefault.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateConditionallyEnabledControl();
                controller.changed();
            }
        });
        cbManual.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateConditionallyEnabledControl();
                controller.changed();
            }
        });
		  cbLocal.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateConditionallyEnabledControl();
                controller.changed();
            }
        });
		  cbServer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateConditionallyEnabledControl();
                controller.changed();
            }
        });		  
        txtServerURI.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                controller.changed();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                controller.changed();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                controller.changed();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      jPanel2 = new javax.swing.JPanel();
      cbLocal = new javax.swing.JRadioButton();
      cbServer = new javax.swing.JRadioButton();
      jLabel1 = new javax.swing.JLabel();
      txtServerURI = new javax.swing.JTextField();
      jPanel1 = new javax.swing.JPanel();
      lblDotPath = new javax.swing.JLabel();
      btnDotPath = new javax.swing.JButton();
      txtDotPath = new javax.swing.JTextField();
      lblGraphviz = new javax.swing.JLabel();
      lblPlanUml = new javax.swing.JLabel();
      cbDefault = new javax.swing.JRadioButton();
      cbManual = new javax.swing.JRadioButton();
      txtDotPathWarn = new javax.swing.JLabel();
      plantumlOptionsPanel = new javax.swing.JPanel();
      encodingLabel = new javax.swing.JLabel();
      encodingComboBox = new javax.swing.JComboBox<>();

      setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

      jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.jPanel2.border.title"))); // NOI18N

      buttonGroup2.add(cbLocal);
      org.openide.awt.Mnemonics.setLocalizedText(cbLocal, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.cbLocal.text")); // NOI18N
      cbLocal.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbLocalActionPerformed(evt);
         }
      });

      buttonGroup2.add(cbServer);
      cbServer.setSelected(true);
      org.openide.awt.Mnemonics.setLocalizedText(cbServer, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.cbServer.text")); // NOI18N
      cbServer.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbServerActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.jLabel1.text")); // NOI18N

      txtServerURI.setText(org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.txtServerURI.text")); // NOI18N

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(txtServerURI, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(cbLocal)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(cbServer)
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cbLocal)
               .addComponent(cbServer))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(txtServerURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      add(jPanel2);

      jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.jPanel1.border.title"))); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lblDotPath, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.lblDotPath.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(btnDotPath, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.btnDotPath.text")); // NOI18N
      btnDotPath.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDotPathActionPerformed(evt);
         }
      });

      txtDotPath.setText(org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.txtDotPath.text")); // NOI18N
      txtDotPath.setMaximumSize(new java.awt.Dimension(450, 19));
      txtDotPath.setMinimumSize(new java.awt.Dimension(450, 19));
      txtDotPath.setPreferredSize(new java.awt.Dimension(450, 19));

      org.openide.awt.Mnemonics.setLocalizedText(lblGraphviz, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.lblGraphviz.text")); // NOI18N
      lblGraphviz.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            lblGraphvizMouseClicked(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(lblPlanUml, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.lblPlanUml.text")); // NOI18N
      lblPlanUml.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            lblPlanUmlMouseClicked(evt);
         }
      });

      buttonGroup1.add(cbDefault);
      org.openide.awt.Mnemonics.setLocalizedText(cbDefault, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.cbDefault.text")); // NOI18N
      cbDefault.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbDefaultActionPerformed(evt);
         }
      });

      buttonGroup1.add(cbManual);
      org.openide.awt.Mnemonics.setLocalizedText(cbManual, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.cbManual.text")); // NOI18N
      cbManual.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cbManualActionPerformed(evt);
         }
      });

      txtDotPathWarn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/plantumlnb/ui/options/info.png"))); // NOI18N
      org.openide.awt.Mnemonics.setLocalizedText(txtDotPathWarn, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.txtDotPathWarn.text")); // NOI18N
      txtDotPathWarn.setVerticalAlignment(javax.swing.SwingConstants.TOP);
      txtDotPathWarn.setMaximumSize(new java.awt.Dimension(530, 30));
      txtDotPathWarn.setMinimumSize(new java.awt.Dimension(530, 30));
      txtDotPathWarn.setPreferredSize(new java.awt.Dimension(530, 30));

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(112, 112, 112)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(lblGraphviz)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(cbManual)
                     .addComponent(lblPlanUml, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(cbDefault))
                  .addGap(0, 0, Short.MAX_VALUE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(lblDotPath)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDotPathWarn, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                     .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDotPath, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDotPath, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(lblGraphviz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lblPlanUml, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6)
            .addComponent(cbDefault)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbManual)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(btnDotPath, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(lblDotPath)
               .addComponent(txtDotPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(txtDotPathWarn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      add(jPanel1);

      plantumlOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.plantumlOptionsPanel.border.title"))); // NOI18N

      encodingLabel.setLabelFor(encodingComboBox);
      org.openide.awt.Mnemonics.setLocalizedText(encodingLabel, org.openide.util.NbBundle.getMessage(PlantUMLPanel.class, "PlantUMLPanel.encodingLabel.text")); // NOI18N
      encodingLabel.setMaximumSize(new java.awt.Dimension(200, 15));
      encodingLabel.setMinimumSize(new java.awt.Dimension(200, 15));
      encodingLabel.setPreferredSize(new java.awt.Dimension(200, 15));

      encodingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US-ASCII", "ISO-8859-1", "UTF-8", "UTF-16BE", "UTF-16LE", "UTF-16" }));

      javax.swing.GroupLayout plantumlOptionsPanelLayout = new javax.swing.GroupLayout(plantumlOptionsPanel);
      plantumlOptionsPanel.setLayout(plantumlOptionsPanelLayout);
      plantumlOptionsPanelLayout.setHorizontalGroup(
         plantumlOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(plantumlOptionsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(encodingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(430, Short.MAX_VALUE))
      );
      plantumlOptionsPanelLayout.setVerticalGroup(
         plantumlOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(plantumlOptionsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(plantumlOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(encodingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      add(plantumlOptionsPanel);
   }// </editor-fold>//GEN-END:initComponents

    private void lblGraphvizMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGraphvizMouseClicked
        try {
            HtmlBrowser.URLDisplayer.getDefault().showURLExternal(new URL("http://www.graphviz.org/"));
        } catch (MalformedURLException ex) {
        }
    }//GEN-LAST:event_lblGraphvizMouseClicked

    private void lblPlanUmlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPlanUmlMouseClicked
        try {
            HtmlBrowser.URLDisplayer.getDefault().showURLExternal(new URL("http://plantuml.sourceforge.net/graphvizdot.html"));
        } catch (MalformedURLException ex) {
        }
    }//GEN-LAST:event_lblPlanUmlMouseClicked

    private void btnDotPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDotPathActionPerformed
        File path = new FileChooserBuilder(this.getClass().getSimpleName()).setTitle("Choose path to dot executable").showOpenDialog();
        if (path != null) {
            txtDotPath.setText(path.getAbsolutePath());
        }
    }//GEN-LAST:event_btnDotPathActionPerformed

    private void cbManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbManualActionPerformed
        updateConditionallyEnabledControl();
    }//GEN-LAST:event_cbManualActionPerformed

    private void updateConditionallyEnabledControl() {
        lblDotPath.setEnabled(cbManual.isSelected());
        txtDotPath.setEnabled(cbManual.isSelected());
        txtDotPathWarn.setEnabled(cbManual.isSelected());
        btnDotPath.setEnabled(cbManual.isSelected());
		  txtServerURI.setEnabled(cbServer.isSelected());
        updateUI();
    }

    private void cbDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDefaultActionPerformed
        updateConditionallyEnabledControl();
    }//GEN-LAST:event_cbDefaultActionPerformed

   private void cbLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLocalActionPerformed
      updateConditionallyEnabledControl();
   }//GEN-LAST:event_cbLocalActionPerformed

   private void cbServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbServerActionPerformed
      updateConditionallyEnabledControl();
   }//GEN-LAST:event_cbServerActionPerformed

    void load() {
        final boolean manual = NbPreferences.forModule(PlantUMLPanel.class).getBoolean(DOT_MANUAL_MODE, false);
        ((manual) ? cbManual : cbDefault).setSelected(true);
        final boolean server = NbPreferences.forModule(PlantUMLPanel.class).getBoolean(SERVER_MODE, true);
        ((server) ? cbServer : cbLocal).setSelected(true);
        txtDotPath.setText(NbPreferences.forModule(PlantUMLPanel.class).get(DOT_MANUAL_MODE_DOT_PATH, ""));
        txtServerURI.setText(NbPreferences.forModule(PlantUMLPanel.class).get(SERVER_URI, DEFAULT_SERVER_URI));
        updateConditionallyEnabledControl();
        final String encoding = NbPreferences.forModule(PlantUMLPanel.class).get(PLANTUML_ENCODING, DEFAULT_UTF8_ENCODING);
        encodingComboBox.setSelectedItem(encoding);
        updateUI();
    }

    void store() {
        NbPreferences.forModule(PlantUMLPanel.class).putBoolean(DOT_MANUAL_MODE, cbManual.isSelected());
        NbPreferences.forModule(PlantUMLPanel.class).put(DOT_MANUAL_MODE_DOT_PATH, txtDotPath.getText());
        NbPreferences.forModule(PlantUMLPanel.class).put(PLANTUML_ENCODING, (String) encodingComboBox.getSelectedItem());
        NbPreferences.forModule(PlantUMLPanel.class).putBoolean(SERVER_MODE, cbServer.isSelected());
        NbPreferences.forModule(PlantUMLPanel.class).put(SERVER_URI, txtServerURI.getText());
    }

    boolean valid() {
        if (cbManual.isSelected()) {
            final File file = new File(txtDotPath.getText());
            if (!file.exists()) {
                return false;
            }
            FileObject fileObject = FileUtil.toFileObject(FileUtil.normalizeFile(file));
            boolean isDot = "dot".equalsIgnoreCase(fileObject.getName());
            return isDot;
        } else {
            return true;
        }
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnDotPath;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.JRadioButton cbDefault;
   private javax.swing.JRadioButton cbLocal;
   private javax.swing.JRadioButton cbManual;
   private javax.swing.JRadioButton cbServer;
   private javax.swing.JComboBox<String> encodingComboBox;
   private javax.swing.JLabel encodingLabel;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JLabel lblDotPath;
   private javax.swing.JLabel lblGraphviz;
   private javax.swing.JLabel lblPlanUml;
   private javax.swing.JPanel plantumlOptionsPanel;
   private javax.swing.JTextField txtDotPath;
   private javax.swing.JLabel txtDotPathWarn;
   private javax.swing.JTextField txtServerURI;
   // End of variables declaration//GEN-END:variables
}
